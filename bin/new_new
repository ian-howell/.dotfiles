#!/usr/bin/python3

import aafclient
import argparse
import configparser
import json
import os
import requests
import sys
import timeit

def file_exists( parser, arg ):
    f = os.path.expanduser( arg )
    if ( not os.path.exists( f ) ):
        parser.error("File '{}' does not exist.".format( f ) )
        return False

    return f

def parseArgs():
    parser = argparse.ArgumentParser( description="Test AAF's processes")
    parser.add_argument( '-D', '--dump', action='store_true', help="print body of msg returned from API call", required=False)
    parser.add_argument( '-P', '--pretty', action='store_true', help="pretty print json", required=False)
    parser.add_argument( '-p', '--prod', action='store_true',  required=False)
    parser.add_argument( '-i', '--ist',  action='store_true',  required=False)
    parser.add_argument( '-t', '--test', action='store_true',  required=False)
    parser.add_argument( '-d', '--devl', action='store_true',  required=False)
    parser.add_argument( '--gui', action='store_true',  required=False, help="Test AAF's GUI component")
    parser.add_argument( '--gw', action='store_true',  required=False, help="Test AAF's GW component")
    parser.add_argument( '--api', action='store_true',  required=False, help="Test AAF's API component")
    parser.add_argument( '-c', '--config-file',
            dest='conf',
            nargs='?',
            help='Config file containing authentication settings, etc',
            default='~/.private/my.ini',
            type=lambda x: file_exists( parser, x ),
            required=False )

    return parser, parser.parse_args()

#
#
#
def main():
    parser,args = parseArgs()
    config = configparser.ConfigParser()
    whichEnvs = list()
    whichComponent = list()

    try:
        config.read( args.conf )
        print(args.conf)

        user = config['authentication']['user']
        password = config['authentication']['password']

        for k in args.__dict__:
            if ( k in ['devl','test','ist','prod'] ):
                if ( args.__dict__[k] ):
                    whichEnvs.append( k )
            if ( k in ['gw', 'gui', 'api'] ):
                if ( args.__dict__[k] ):
                    whichComponent.append( k )

    except:
        print( "ERROR: invalid config file: ", args.conf )
        print( sys.exc_info() )
        sys.exit()

    if ( len( whichEnvs ) < 1 ):
        print( "ERROR: must specify one or more environments" );
        parser.print_help()
        sys.exit( 0 )

    if ( len( whichComponent ) < 1 ):
        print( "ERROR: must specify one or more components" );
        parser.print_help()
        sys.exit( 0 )

    for env in whichEnvs:
        if ( len( whichEnvs ) > 1 ):
            print( env.upper() )

        client = aafclient.AAFClient( user, password, env )

        for c in whichComponent:
            # if ( len( whichComponent ) > 1 ):
            #     print( "  {}".format( c.lower() ) )

            api = config[c]['url']
            print( "  {}: {}".format( c.lower(), api ) )

            # This is probably overly obscure;
            # - my AAFClient obj has {component}Endpoints function for each of gui, gw, api
            # - using getattr(), I can get the value of the fun w/out series of if/elif
            #
            try:
                funcname = "{}Endpoints".format( c )
                func = getattr( client, funcname )
            except AttributeError:
                print( "Not found".format( funcname ) )
            else:
                for e in func:
                    url = 'https://{}{}'.format( e, api )
                    start_time = timeit.default_timer()

                    value = client.call_AAF( url )
                    print( '    {0}:{1} {2:0.2f}'.format( e, value.status_code, timeit.default_timer() - start_time, 2 ) )

                    if ( value.status_code == 200 and ( args.dump or args.pretty ) ):
                        try:
                            if ( args.pretty ):
                                print( json.dumps( value.json(), sort_keys=True, indent=4 ) )
                            else:
                                print(  value.json() )
                        #
                        # If what we got back isn't valid json, ignore it
                        #
                        except json.decoder.JSONDecodeError:
                            continue
                        except:
                            print( "ERROR: can't print json", value.text )
            print()
        print()
    print()
#############################################################################################

main()


