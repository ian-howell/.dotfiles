#===[ Prefix
unbind C-b
set -g prefix C-Space
bind Space send-prefix

#===[ Vi keys
set -gw mode-keys vi

# Not directly vim related, but this prevents tmux from waiting after escape
# has been pressed
set -sg escape-time 0

# seamless movement across vim windows / tmux panes
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R

# vi-like selection and copy
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe "xclip -sel clip -i"
# Change default behavior of Enter to match 'y'
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe "xclip -sel clip -i"
# If we want to immediately exit copy mode, we can use this shortcut
bind-key -T copy-mode-vi 'Y' send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"

# use escape to exit copy mode
bind-key -T copy-mode-vi Escape send-keys -X cancel

#===[ Mouse
# This turns the mouse on (need to hold SHIFT to get to system clipboard)
set -g mouse on

# This prevents the incredibly annoying behavior of jumping to the bottom of the screen when you highlight text
unbind -T copy-mode-vi MouseDragEnd1Pane

# Prevent a single leftclick from entering copy mode
unbind-key    -T root         MouseDrag1Pane

# Use alt-leftclick instead. The first commands causes the click to switch panes first if needed
bind-key -T root M-MouseDown1Pane select-pane -t = \; send-keys -M
bind-key -T copy-mode-vi M-MouseDown1Pane select-pane
# Begin a selection
bind-key -T root M-MouseDrag1Pane if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode -M"
bind-key -T copy-mode-vi M-MouseDrag1Pane select-pane \; send-keys -X begin-selection
# Begin a word-wise selection. This just barely even works and could use some improvement
bind-key -T root M-DoubleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode -M ; send -X select-word"
bind-key -T copy-mode-vi M-DoubleClick1Pane select-pane \; send-keys -X select-word
# Begin a line-wise selection
bind-key -T root M-TripleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" "copy-mode -M ; send -X select-line"
bind-key -T copy-mode-vi M-TripleClick1Pane select-pane \; send-keys -X select-line

#===[ Window Naming
# Start window numbers from 1
set -g base-index 1
# don't rename windows automatically
set-option -g allow-rename off

#===[ Key bindings
bind R source-file ~/.tmux.conf \; display-message "Configuration reloaded."
bind C-Space last-window
# Open new panes in the current directory
bind s split-window -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
# Open a new window with the purpose of being a "terminal". Note that -p expects a percentage
bind t split-window -c "#{pane_current_path}" -p 15

# (CLONE) Open a named window in the current directory
bind C command-prompt -p "New window name:" "new-window -n '%1' -c '#{pane_current_path}'"
# (CLONE) Open an unnamed window in the current directory
bind c new-window -c "#{pane_current_path}"
# (NEW) Open a named window in the $HOME directory
bind N command-prompt -p "New window name:" "new-window -n '%1'"
# (NEW) Open an unnamed window in the $HOME directory
bind n new-window

# Switch to window by partial name matching
bind-key g command-prompt -p "Switch to window:" "run-shell 'tmux select-window -t \"$(tmux list-windows | grep -m1 -i \"%%\" | cut -f1 -d':')\"'"

# Sane window switching
unbind .
bind-key m command-prompt -p "Move to index:" "run-shell 'tx-insert-window %%'"
bind-key M move-window -r

# Sane window renaming
unbind ,
bind-key r command-prompt -I "#W" "rename-window -- '%%'"

# I would love to use 'v' here, but it's already taken for vertical split
bind-key V copy-mode

# fast access to syncronize-panes
bind-key S setw synchronize-panes

#===[ Scrollback
set-option -g history-limit 50000

#===[ Noise Suppression
# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

#===[ Colors
set -g default-terminal "tmux-256color"
# Taken from here: https://github.com/tmux/tmux/issues/696
# I have no idea how it works, but it makes pretty colors, and that makes me happy
set -ga terminal-overrides ",*-256color:Tc"
  #===[ Panes
  # set -g pane-border-bg colour237
  # set -g pane-border-fg colour237
  set -g pane-border-style bg=colour237,fg=colour237
  # set -g pane-active-border-bg colour241
  # set -g pane-active-border-fg colour241
  set -g pane-active-border-style bg=colour241,fg=colour241

  #===[ Statusbar
  set -g status-position bottom
  set -g status-justify left
  set -g status-bg colour241
  set -g status-left ''
  set -g status-right '#[fg=colour232,bg=colour241,bold] #{?pane_synchronized,sync,} #[fg=colour248,bg=colour232,bold] %m/%d #[fg=colour232,bg=colour241,bold] %H:%M:%S '
  set -g status-right-length 50
  set -g status-left-length 20

  #===[ Active/Inactive Windows

  #set inactive/active window styles
  set -g window-style fg=default,bg=default
  set -g window-active-style fg=default,bg=black

  # set the pane border colors
  set -g pane-border-style bg=default,fg=colour241
  set -g pane-active-border-style bg=colour241,fg=colour241

  setw -g window-status-current-style bg=colour232,fg=colour248,bold
  setw -g window-status-current-format ' #I:#W#[fg=colour1]#F '

  #===[ Messages
  # set -g message-attr bold
  # set -g message-fg colour4
  # set -g message-bg colour16
  set -g message-style bg=colour16,fg=colour4,bold
