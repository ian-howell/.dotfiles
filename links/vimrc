"===[ Plugins
call plug#begin()

" Colorschemes
Plug 'romainl/apprentice'

" Things that should be built in
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'einfachtoll/didyoumean'
Plug 'wellle/targets.vim'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Assorted
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'christoomey/vim-tmux-navigator'
Plug 'skywind3000/asyncrun.vim'
Plug 'romainl/vim-qf'
Plug 'w0rp/ale'

" Language specific. I imagine this section will be pretty fluid
Plug 'fatih/vim-go'

call plug#end()

"For filestype specific things (like syntax highlighting)
filetype plugin indent on
"For more matching. See :h matchit
runtime macros/matchit.vim
"End Plugins
"===]
"===[ Colors
syntax enable
" This is such a hack: set the colorscheme to torte, then set it to apprentice.
" If setting it to apprentice fails, it will do so quietly. This is import
" when installing plugins with 'vim +PlugInstall +qall'
colorscheme torte
silent! colorscheme apprentice
"===]
"===[ Search behaviour
set incsearch                        "Lookahead as search pattern is specified

"Pulled from :help 'incsearch' - highlight all matchs while searching
augroup vimrc-incsearch-highlight
    autocmd!
    autocmd CmdlineEnter /,\? :set hlsearch
    autocmd CmdlineLeave /,\? :set nohlsearch
augroup END
"===]
"===[ Tab behaviour
set shiftwidth=4       "Indent/outdent by 4 columns
set shiftround         "Indents always land on a multiple of shiftwidth
set smarttab           "Backspace deletes a shiftwidth's worth of spaces
set expandtab          "Turns tabs into spaces
set autoindent         "Keep the same indentation level when inserting a new line
"===]
"===[ Line and column display settings
"== Lines =="
set nowrap             "Don't word wrap
set number             "Show the cursor's current line

"Highlight the current line
set cursorline
"Only highlight the active window
augroup highlight_follows_focus
    autocmd!
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

"== Columns =="
set sidescroll=1                             "Set horizontal scroll speed
set colorcolumn=80                           "color line 80
set signcolumn=yes                           "Keep the sign column open at all times
set nostartofline                            "Prevent the cursor fom changing columns when jumping
"===]
"===[ Windows and splitting
set splitright       "Put vertical splits on the right rather than the left
set splitbelow       "Put horizontal splits on the bottom rather than the top

" These mappings will be overwritten by tmux-navigator if it exists
nnoremap <silent> <c-h> <c-w><c-h>
nnoremap <silent> <c-j> <c-w><c-j>
nnoremap <silent> <c-k> <c-w><c-k>
nnoremap <silent> <c-l> <c-w><c-l>
nnoremap <silent> <c-\> <c-w><c-\>
"===]
"===[ Miscellaneous key mappings
"Quickly source vimrc
nnoremap <silent> <space>s :source $MYVIMRC<CR>

"Fast bracketing (repeatable)
inoremap {{ {<CR>}<UP><END>

"Yank to EOL like it should
nnoremap Y y$
"Copy to system clipboard
nnoremap <space>y "+y
xnoremap <space>y "+y
"Paste from system clipboard
nnoremap <space>p "+p
nnoremap <space>P "+P
xnoremap <space>p "+p

"Remove all trailing whitespace from a file
nnoremap <silent> <space>ws :call whitespace#StripTrailingWhiteSpace()<CR>

"Sane paragraph boundaries
nnoremap <silent> { :<C-u>call ipmotion#MyPrevParagraph()<CR>
nnoremap <silent> } :<C-u>call ipmotion#MyNextParagraph()<CR>
xnoremap <silent> { :<C-u>exe "normal! gv"<Bar>call ipmotion#MyPrevParagraph()<CR>
xnoremap <silent> } :<C-u>exe "normal! gv"<Bar>call ipmotion#MyNextParagraph()<CR>

"Mappings for working with diffs in visual mode
xnoremap <silent> <space>do :diffget<CR>
xnoremap <silent> <space>dp :diffput<CR>

"Turn the mouse on
set mouse=n
"Mappings to make the scrollwheel work as expected
noremap <ScrollWheelUp> 2<C-Y>
noremap <ScrollWheelDown> 2<C-E>
noremap <C-ScrollWheelUp> 5zh
noremap <C-ScrollWheelDown> 5zl
"Unmap all the useless mouse actions
noremap <LeftMouse> <nop>
noremap <RightMouse> <nop>
"but we can use this for convenient window swapping
noremap <C-LeftMouse> <LeftMouse>

"Tab complete with tab key
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
"===]
"===[ Statusline
"Always show the status line
set laststatus=2

"Setup custom colors
hi User1 ctermbg=NONE cterm=bold
hi User2 ctermbg=grey ctermfg=black
hi User3 ctermbg=grey ctermfg=52 cterm=bold

set statusline=                            "Start empty
set statusline+=%2*                        "Change color
set statusline+=%{statusline#Modified()}   "Mark whether the file is modified, unmodified, or unmobifiable
set statusline+=\ ‹%f›                     "File name
set statusline+=%3*                        "Change color
set statusline+=%{statusline#GitBranch()}  "Git branch
set statusline+=%2*                        "Change color
set statusline+=%=                         "Switch to the right side
set statusline+=\ %3.c                     "Current column
set statusline+=\ %P                       "Percentage through file
set statusline+=\ %y                       "Filetype

"Finally, turn off the titlebar
set notitle
"===]
"===[ Fix misspellings on the fly
iabbrev          retrun           return
iabbrev           pritn           print
iabbrev         incldue           include
iabbrev         inculde           include
iabbrev         inlcude           include
iabbrev              ;t           't

command! W w
command! Q q
command! QA qa
command! Qa qa
command! W w
command! WQ wq
command! Wq wq
command! WQa wqa
command! Wqa wqa
"===]
"===[ Folds
set foldmethod=syntax            "Create folds on syntax
set foldlevel=999                "Start vim with all folds open
set foldtext=folding#MyFoldText()
"===]
"===[ Show undesirable hidden characters
"Show hidden characters
if &modifiable
  set list
endif
"Set tabs to a straight line followed by blanks and trailing spaces to dots
set listchars=tab:│\ ,trail:·
"Remove the background highlighting from the above special characters
highlight clear SpecialKey
"===]
"===[ Tags
set tags=./tags;,tags;
nnoremap <space>tj :tjump /
nnoremap <space>tp :ptjump /
"===]
"===[ Persistant Undos
set undofile
set undodir=$HOME/.vim/undo
"===]
"===[ File navigation
"Allow changed buffers to be hidden
set hidden

"Recursively search current directory
set path=.,,**

"These mappings will be overwritten by fzf.vim if it exists
nnoremap <space>ff :find<space>
nnoremap <space>fv :vert sfind<space>
nnoremap <space>fs :sfind<space>
" Shortcut to find buffers
nnoremap <space>bb :buffer<space>
nnoremap <space>bs :vert sbuffer<space>
nnoremap <space>bv :sbuffer<space>

nnoremap <silent> <space>bn :bnext<cr>
nnoremap <silent> <space>bp :bprevious<cr>
nnoremap <silent> <space>bf :bfirst<cr>
nnoremap <silent> <space>bl :blast<cr>

"This does bufdo e without losing highlighting
nnoremap <silent> <space>be :call buffers#EditWithoutLosingSyntax()<cr>
"===]
"===[ Grep customization
if executable('ag')
  let &grepprg='ag --vimgrep'
endif
"===]
"===[ Quickfix and Location window Shortcuts
nmap <space>qn <Plug>(qf_qf_next)
nmap <space>qp <Plug>(qf_qf_previous)
nmap <space>qq <Plug>(qf_qf_switch)
" This doesn't quite work the way I like it
" nmap <space>qt <Plug>(qf_qf_toggle)
" Use my own instead
nmap <silent> <space>qt :call quickfix#Toggle()<cr>
" Quickly close all quickfix and location lists
nmap <silent> <space>qc :windo lclose \| cclose<cr>

nmap <space>ln <Plug>(qf_loc_next)
nmap <space>lp <Plug>(qf_loc_previous)
nmap <space>lq <Plug>(qf_loc_switch)
nmap <space>lt <Plug>(qf_loc_toggle)

"The following setting provides these commands from the quickfix and location windows
" s - open entry in a new horizontal window
" v - open entry in a new vertical window
" t - open entry in a new tab
" o - open entry and come back
" O - open entry and close the location/quickfix window
" p - open entry in a preview window
let g:qf_mapping_ack_style = 1

let g:qf_auto_open_quickfix = 0
"===]
"===[ Wildmenu
set wildmenu
set wildmode=full
set wildignore+=*.o,*.so
set wildignore+=*.d
set wildignore+=*.aux,*.out,*.pdf
set wildignore+=*.pyc,__pycache__
set wildignore+=*.tar,*.gz,*.zip,*.bzip,*.bz2
set wildignore+=tags
set wildignore+=/home/**/*venv*/**
set wildignore+=*.class
set wildignore+=*.png,*.jpg,*.bmp,*.gif
set wildignore+=*.html  " Comment this out for html, obviously
set wildignore+=*.doctree
set wildignore+=%*
"===]
"===[ Unsorted
"Sane backspace
set backspace=indent,eol,start
"Don't use swp files
set noswapfile
"Get out of visual mode faster
set ttimeoutlen=0
" Read from modelines for vim settings
set modelines=1
" Update faster. This is used for a handful of plugins (like git-gutter)
set updatetime=750
" Only redraw the screen when needed - this works for macros and mappings
set lazyredraw
" Sharing is caring - romainl: https://gist.github.com/romainl/1cad2606f7b00088dda3bb511af50d53
command! -range=% IX  <line1>,<line2>w !curl -F 'f:1=<-' ix.io | tr -d '\n' | xclip -i -selection clipboard
"===]
"===[ Plugin Settings
  "===[ vim-fugitive
  nnoremap <silent> <space>gst :Gstatus<CR>
  nnoremap <silent> <space>glo :Glog -10<CR>
  nnoremap <silent> <space>gdi :Gvdiff<CR>
  nnoremap <silent> <space>gad :Gwrite<CR>
  nnoremap <silent> <space>gre :Gread<CR>
  nnoremap <silent> <space>gco :Gcommit<CR>
  nnoremap <silent> <space>ged :Gedit<CR>
  "===]
  "===[ fzf
  let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }
  if git#IsGitRepo()
    let fzfSource = 'git ls-files -co --exclude-standard'
  else
    let fzfSource = 'fd . --type f --type l'
  endif
  " So this is smart - f* will use git files if in a git repo, and fd files otherwise
  nnoremap <silent> <space>ff :call fzf#run({'source': fzfSource, 'sink': 'edit', 'window': 'botright split'})<cr>
  nnoremap <silent> <space>fv :call fzf#run({'source': fzfSource, 'sink': 'vsplit', 'window': 'botright split'})<cr>
  nnoremap <silent> <space>fs :call fzf#run({'source': fzfSource, 'sink': 'split', 'window': 'botright split'})<cr>
  " Shortcut to find buffers
  nnoremap <silent> <space>bb :call fzf#run({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'), 'sink': 'edit', 'window': 'botright split'})<cr>
  nnoremap <silent> <space>bs :call fzf#run({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'), 'sink': 'sbuffer', 'window': 'botright split'})<cr>
  nnoremap <silent> <space>bv :call fzf#run({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'), 'sink': 'vert sbuffer', 'window': 'botright split'})<cr>
  " TODO: Implement fzf.vim's Ag function
  " The following hides the statusline
  augroup fzf
    autocmd!
    autocmd! FileType fzf
    autocmd  FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
  augroup END
  "===]
  "===[ ALE
  "Slow down ALE
  let g:ale_lint_delay = 800
  "Always show the gutter
  let g:ale_sign_column_always = 1
  "Custom signs for gutter
  let g:ale_sign_error = "✗"
  let g:ale_sign_warning = "▲"
  "234 is the same color as the sign column's background
  highlight ALEErrorSign ctermbg=234 ctermfg=red
  highlight ALEWarningSign ctermbg=234 ctermfg=yellow
  "===]
  "===[ AsyncRun
  " Fast access to asyncronous background jobs
  nnoremap <space>! :AsyncRun<space>
  nnoremap <space>/ :AsyncRun! -post=botright\ copen -program=grep<space>
  nnoremap <space>* :AsyncRun! -post=botright\ copen -program=grep <cword><CR>
  "===]
  "===[ targets.vim
  " Fix the 'in argument' target
  xmap ia Ia
  omap ia Ia
  "===]
  "===[ tmux-navigator
  nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
  nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
  nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
  nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
  nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>
  "===]
  "===[ vim-go
  nnoremap <silent> ,gf :GoFmt<CR>
  nnoremap <silent> ,gi :GoImports<CR>
  let g:go_fmt_autosave = 0
  "===]
"===]
" vim:foldmethod=marker:foldlevel=0:foldmarker====[,===]
