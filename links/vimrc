"===[ Plugins
call plug#begin()

Plug 'romainl/apprentice'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'einfachtoll/didyoumean'
Plug 'wellle/targets.vim'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'romainl/vim-qf'

Plug 'jsfaint/gen_tags.vim'

Plug 'christoomey/vim-tmux-navigator'

if v:version >= 800
    Plug 'skywind3000/asyncrun.vim'

    Plug 'w0rp/ale'
    "Custom signs for gutter
    let g:ale_sign_error = "✗"
    let g:ale_sign_warning = "▲"
endif

" Close the preview window after completion is done
" autocmd CompleteDone * silent! pclose!
Plug 'zchee/deoplete-jedi'
let g:deoplete#sources#jedi#show_docstring = 1

" We're only going to use jedi-vim for navigation
Plug 'davidhalter/jedi-vim'
let g:jedi#auto_vim_configuration = 0
let g:jedi#completions_enabled = 0
let g:jedi#goto_command = ",pg"
let g:jedi#goto_assignments_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = ",pu"
let g:jedi#completions_command = ""
let g:jedi#rename_command = ",pr"

" I want pymode, but only really for syntax highlighting and folding
Plug 'python-mode/python-mode'
let g:pymode_doc = 0
let g:pymode_run = 0
let g:pymode_breakpoint = 0
let g:pymode_rope = 0

Plug 'fatih/vim-go'
nnoremap ,gc :GoCoverageToggle<cr>

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

call plug#end()

"For filestype specific things (like syntax highlighting)
filetype plugin indent on
"For more matching. See :h matchit
runtime macros/matchit.vim
"End Plugins
"===]
"===[ Colors
syntax enable
" This is such a hack: set the colorscheme to torte, then set it to apprentice.
" If setting it to apprentice fails, it will do so quietly. This is import
" when installing plugins with 'vim +PlugInstall +qall'
colorscheme torte
silent! colorscheme apprentice
"===]
"===[ Search behaviour
set incsearch                        "Lookahead as search pattern is specified
if has('nvim')
    set inccommand=nosplit
endif
"Pulled from :help 'incsearch' - highlight all matchs while searching
augroup vimrc-incsearch-highlight
    autocmd!
    autocmd CmdlineEnter /,\? :set hlsearch
    autocmd CmdlineLeave /,\? :set nohlsearch
augroup END
"===]
"===[ Tab behaviour
set tabstop=4          "Tabs are equal to 4 spaces
set shiftwidth=4       "Indent/outdent by 4 columns
set shiftround         "Indents always land on a multiple of shiftwidth
set smarttab           "Backspace deletes a shiftwidth's worth of spaces
set expandtab          "Turns tabs into spaces
" set noexpandtab        "Turns spaces into spaces
set autoindent         "Keep the same indentation level when inserting a new line
"===]
"===[ Line and column display settings
"== Lines =="
set nowrap             "Don't word wrap
set number             "Show the cursor's current line
set scrolloff=2        "Scroll when 2 lines from top/bottom

"Highlight the current line
set cursorline
"Only highlight the active window
augroup highlight_follows_focus
    autocmd!
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

"== Columns =="
set sidescroll=1                           "Set horizontal scroll speed
set colorcolumn=80
set signcolumn=yes                           "Keep the sign column open at all times
set nostartofline                            "Prevent the cursor fom changing columns when jumping
"===]
"===[ Windows and splitting
set splitright       "Put vertical splits on the right rather than the left
set splitbelow       "Put horizontal splits on the bottom rather than the top

"Mapping for more convenient 'window mode'
nnoremap <space>w <C-w>

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>
"===]
"===[ Miscellaneous key mappings
"Quickly source vimrc
nnoremap <silent> <space>s :source ~/.vimrc<CR>

"Fast bracketing (repeatable)
inoremap {{ {<CR>}<UP><END>

"Yank to EOL like it should
nnoremap Y y$
"Copy to system clipboard
nnoremap <space>y "+y
xnoremap <space>y "+y
"Paste from system clipboard
nnoremap <space>p "+p
nnoremap <space>P "+P
xnoremap <space>p "+p

"Disable help screen on F1
inoremap <F1> <ESC>
nnoremap <F1> <Esc>

inoremap <buffer> </ </<C-x><C-o>|           "Auto-close html tags

nnoremap <F5> :call build#Build()<CR>

"Remove all trailing whitespace from a file
nnoremap <silent> <space>ws :call whitespace#StripTrailingWhiteSpace()<CR>

"Sane paragraph boundaries
nnoremap <silent> { :<C-u>call ipmotion#MyPrevParagraph()<CR>
nnoremap <silent> } :<C-u>call ipmotion#MyNextParagraph()<CR>
xnoremap <silent> { :<C-u>exe "normal! gv"<Bar>call ipmotion#MyPrevParagraph()<CR>
xnoremap <silent> } :<C-u>exe "normal! gv"<Bar>call ipmotion#MyNextParagraph()<CR>

"fugitive.vim mappings
nnoremap <space>gst :Gstatus<CR>
nnoremap <space>glo :Glog -10<CR>
nnoremap <space>gdi :Gvdiff<CR>
nnoremap <space>gad :Gwrite<CR>
nnoremap <space>gre :Gread<CR>
nnoremap <space>gco :Gcommit<CR>
nnoremap <space>ged :Gedit<CR>

"Mappings for working with diffs in visual mode
xnoremap <space>do :diffget<CR>
xnoremap <space>dp :diffput<CR>

"Turn the mouse on
set mouse=n
"Mappings to make the scrollwheel work as expected
noremap <ScrollWheelUp> 2<C-Y>
noremap <ScrollWheelDown> 2<C-E>
noremap <C-ScrollWheelUp> 5zh
noremap <C-ScrollWheelDown> 5zl
"Unmap all the useless mouse actions
noremap <LeftMouse> <nop>
noremap <RightMouse> <nop>
noremap <2-LeftMouse> <nop>
noremap <2-RightMouse> <nop>
noremap <3-LeftMouse> <nop>
noremap <3-RightMouse> <nop>
inoremap <LeftMouse> <nop>
inoremap <RightMouse> <nop>
inoremap <2-LeftMouse> <nop>
inoremap <2-RightMouse> <nop>
inoremap <3-LeftMouse> <nop>
inoremap <3-RightMouse> <nop>
"but we can use this for convenient window swapping
noremap <space>w<LeftMouse> <LeftMouse>

"Tab complete with tab key
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"

" Fast access to asyncronous background jobs
nnoremap <space>! :AsyncRun<space>
"===]
"===[ Statusline
"Always show the status line
set laststatus=2

"Setup custom colors
hi User1 ctermbg=NONE cterm=bold
hi User2 ctermbg=grey ctermfg=black
hi User3 ctermbg=grey ctermfg=52 cterm=bold

set statusline=                            "Start empty
set statusline+=%2*                        "Change color
set statusline+=%{statusline#Modified()}   "Mark whether the file is modified, unmodified, or unmobifiable
set statusline+=\ ‹%f›                     "File name
set statusline+=%3*                        "Change color
set statusline+=%{statusline#GitBranch()}  "Git branch
set statusline+=%2*                        "Change color
set statusline+=%=                         "Switch to the right side
set statusline+=\ %3.c                     "Current column
set statusline+=\ %P                       "Percentage through file
set statusline+=\ %y                       "Filetype

"Finally, turn off the titlebar
set notitle
"===]
"===[ Fix misspellings on the fly
iabbrev          retrun           return
iabbrev           pritn           print
iabbrev         incldue           include
iabbrev         inculde           include
iabbrev         inlcude           include
iabbrev              ;t           't

command! W w
command! Q q
command! QA qa
command! Qa qa
command! W w
command! WQ wq
command! Wq wq
command! WQa wqa
command! Wqa wqa
"===]
"===[ Folds
set foldmethod=syntax            "Create folds on syntax
set foldlevel=999                "Start vim with all folds open
set foldtext=folding#MyFoldText()
"===]
"===[ Show undesirable hidden characters
"Show hidden characters
if &modifiable
  set list
endif
"Set tabs to a straight line followed by blanks and trailing spaces to dots
set listchars=tab:│\ ,trail:·
"Remove the background highlighting from the above special characters
highlight clear SpecialKey
"===]
"===[ Tags
set tags=./tags;,tags;
" Disable gtags support
let g:loaded_gentags#gtags = 1
" Generate tags automatically (if using git)
let g:gen_tags#ctags_auto_gen = 1
" Use git/tags_dir if using git
let g:gen_tags#use_cache_dir = 1
nnoremap <space>tt :GenCtags<CR>
nnoremap <space>tj :tjump /
nnoremap <space>tp :ptjump /
"===]
"===[ Persistant Undos
set undofile
set undodir=$HOME/.vim/undo
"===]
"===[ File navigation
"Allow changed buffers to be hidden
set hidden

"Recursively search current directory
set path=.,,**

if git#IsGitRepo()
  let fzfSource = 'git ls-files -co --exclude-standard'
else
  let fzfSource = 'fd . --type f --type l'
endif

" So this is smart - f* will use git files if in a git repo, and fd files otherwise
nnoremap <silent> <space>ff :call fzf#run({'source': fzfSource, 'sink': 'edit', 'window': 'botright split'})<cr>
nnoremap <silent> <space>fv :call fzf#run({'source': fzfSource, 'sink': 'vsplit', 'window': 'botright split'})<cr>
nnoremap <silent> <space>fs :call fzf#run({'source': fzfSource, 'sink': 'split', 'window': 'botright split'})<cr>

" Shortcut to find buffers
nnoremap <silent> <space>bb :call fzf#run({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'), 'sink': 'edit', 'window': 'botright split'})<cr>
nnoremap <silent> <space>bs :call fzf#run({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'), 'sink': 'sbuffer', 'window': 'botright split'})<cr>
nnoremap <silent> <space>bv :call fzf#run({'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'), 'sink': 'vert sbuffer', 'window': 'botright split'})<cr>
nnoremap <silent> <space>bn :bnext<cr>
nnoremap <silent> <space>bp :bprevious<cr>
nnoremap <silent> <space>bf :bfirst<cr>
nnoremap <silent> <space>bl :blast<cr>

" The following hides the statusline
augroup fzf
  autocmd!
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END
"===]
"===[ Grep customization
let &grepprg='ag --vimgrep'
nnoremap <space>/ :AsyncRun! -post=botright\ copen -program=grep<space>
nnoremap <space>* :AsyncRun! -post=botright\ copen -program=grep <cword><CR>
"===]
"===[ Quickfix and Location window Shortcuts
nmap <space>qn <Plug>(qf_qf_next)
nmap <space>qp <Plug>(qf_qf_previous)
nmap <space>qq <Plug>(qf_qf_switch)
" This doesn't quite work the way I like it
" nmap <space>qt <Plug>(qf_qf_toggle)
" Use my own instead
nmap <silent> <space>qt :call quickfix#Toggle()<cr>
" Quickly close all quickfix and location lists
nmap <silent> <space>qc :windo lclose \| cclose<cr>

nmap <space>ln <Plug>(qf_loc_next)
nmap <space>lp <Plug>(qf_loc_previous)
nmap <space>lq <Plug>(qf_loc_switch)
nmap <space>lt <Plug>(qf_loc_toggle)

"The following setting provides these commands from the quickfix and location windows
" s - open entry in a new horizontal window
" v - open entry in a new vertical window
" t - open entry in a new tab
" o - open entry and come back
" O - open entry and close the location/quickfix window
" p - open entry in a preview window
let g:qf_mapping_ack_style = 1

let g:qf_auto_open_quickfix = 0
"===]
"===[ Wildmenu
set wildmenu
set wildmode=full
set wildignore+=*.o,*.so
set wildignore+=*.d
set wildignore+=*.aux,*.out,*.pdf
set wildignore+=*.pyc,__pycache__
set wildignore+=*.tar,*.gz,*.zip,*.bzip,*.bz2
set wildignore+=tags
set wildignore+=/home/**/*venv*/**
set wildignore+=*.class
set wildignore+=*.png,*.jpg,*.bmp,*.gif
set wildignore+=*.html  " Comment this out for html, obviously
set wildignore+=*.doctree
set wildignore+=%*
"===]
"===[ Unsorted
"Sane backspace
set backspace=indent,eol,start
"Don't use swp files
set noswapfile
"Get out of visual mode faster
set ttimeoutlen=0
" Read from modelines for vim settings
set modelines=1
" Update faster. This is used for a handful of plugins (like git-gutter)
set updatetime=750
" Only redraw the screen when needed - this works for macros and mappings
set lazyredraw
" Sharing is caring - romainl: https://gist.github.com/romainl/1cad2606f7b00088dda3bb511af50d53
command! -range=% IX  <line1>,<line2>w !curl -F 'f:1=<-' ix.io | tr -d '\n' | xclip -i -selection clipboard
"===]
" vim:foldmethod=marker:foldlevel=0:foldmarker====[,===]
