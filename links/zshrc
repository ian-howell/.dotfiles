#===[ Things that need to be sourced
# IMPORTANT: This section needs to remain at the top. Some of the other things
# in this file will depend on it.

# Source my aliases
[[ -f "$HOME/.sh_aliases" ]] && source "$HOME/.sh_aliases"

# My custom functions
[[ -f "$HOME/.funcs" ]] && source "$HOME/.funcs"

# This stuff is (supposedly :eye_roll:) command across different shells
[[ -f "$HOME/.dotfiles/localrc" ]] && source "$HOME/.dotfiles/localrc"
#===]
#===[ Colors
# Turn on convenient colors
autoload -U colors && colors

# ls colors
if [[ -z "$LS_COLORS" ]]; then
  (( $+commands[dircolors] )) && eval "$(dircolors -b)"
fi
ls --color -d . &>/dev/null && alias ls='ls --color=tty' || { ls -G . &>/dev/null && alias ls='ls -G' }
#===]
#===[ Functions
# Outputs current branch info in prompt format
function git_prompt_info() {
  local ref
  ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
  ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
  local prefix suffix
  # prefix="%{$fg_bold[blue]%}git:(%{$fg[red]%}"
  prefix="%{$fg_bold[magenta]%}"
  suffix="%{$reset_color%} "
  echo "$prefix${ref#refs/heads/}$(parse_git_dirty)$suffix"
}

# Checks if working tree is dirty
function parse_git_dirty() {
  local STATUS=''
  local -a FLAGS
  local dirty clean
  dirty=" %{$fg[red]%}âœ—"
  clean=" %{$fg_bold[green]%}âœ“"
  staging=" %{$fg[yellow]%}â˜…"
  FLAGS=('--porcelain')
  FLAGS+='--ignore-submodules=dirty'
  STATUS=$(command git status ${FLAGS} 2> /dev/null)

  UNTRACKED=$(command git status ${FLAGS} 2> /dev/null | grep "^??")
  INDEX_CHANGED=$(command git status ${FLAGS} 2> /dev/null | grep "^[^ ?].")
  WORKINGTREE_CHANGED=$(command git status ${FLAGS} 2> /dev/null | grep "^.[^ ?]")
  let "val = 0"
  if [[ -n $UNTRACKED ]]; then
    let "val = $val | 4"
  fi
  if [[ -n $INDEX_CHANGED ]]; then
    let "val = $val | 2"
  fi
  if [[ -n $WORKINGTREE_CHANGED ]]; then
    let "val = $val | 1"
  fi
  if [[ $val -eq 0 ]]; then
    echo " %{$fg_bold[green]%}$val"
  elif [[ "(( $val % 2 ))" -eq 0 ]]; then
    echo " %{$fg_bold[yellow]%}$val"
  else
    echo " %{$fg_bold[red]%}$val"
  fi
}

function vi_mode_prompt_info() {
  local mode_indicator="%{$fg_bold[magenta]%}(cmd)%{$reset_color%}"
  echo "${${KEYMAP/vicmd/$mode_indicator}/(main|viins)/}"
}
#===]
#===[ Prompt
ret_status="%(?:%{$fg_bold[green]%}âžœ :%{$fg_bold[red]%}âžœ )"
PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'
RPS1='$(vi_mode_prompt_info)'
#===]
#===[ Vim
# Updates editor information when the keymap changes.
function zle-keymap-select() {
  zle reset-prompt
  zle -R
}

# Ensure that the prompt is redrawn when the terminal size changes.
TRAPWINCH() {
  zle && { zle -R; zle reset-prompt }
}

zle -N zle-keymap-select
zle -N edit-command-line

# turn on vi-mode
bindkey -v

# allow v to edit the command line (standard behaviour)
autoload -Uz edit-command-line
bindkey -M vicmd 'q' edit-command-line

# allow ctrl-p, ctrl-n for navigate history (standard behaviour)
bindkey '^P' up-history
bindkey '^N' down-history

# allow ctrl-h, ctrl-w, ctrl-? for char and word deletion (standard behaviour)
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word

# allow ctrl-r to perform backward search in history
bindkey '^r' history-incremental-search-backward

# allow ctrl-a and ctrl-e to move to beginning/end of line
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

# make mode transitions faster (KEYTIMEOUT is in hundredths of a second)
export KEYTIMEOUT=1
#===]
#===[ Completion
# TODO: clean this up

# add custom completionos to the function path
# TODO: create a 'completions' directory
fpath=($ZSH/completions $fpath)
# load stock functions
autoload -U compaudit compinit

# fixme - the load process here seems a bit bizarre
zmodload -i zsh/complist

WORDCHARS=''

unsetopt menu_complete   # do not autoselect the first completion entry
unsetopt flowcontrol
setopt auto_menu         # show completion menu on successive tab press
setopt complete_in_word
setopt always_to_end

# should this be in keybindings?
bindkey -M menuselect '^o' accept-and-infer-next-history
zstyle ':completion:*:*:*:*:*' menu select

# partial-word and substring completion
HYPHEN_INSENSITIVE=true
if [[ "$HYPHEN_INSENSITIVE" = true ]]; then
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'
else
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
fi
unset HYPHEN_INSENSITIVE

# Complete . and .. special directories
zstyle ':completion:*' special-dirs true

zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'

# disable named-directories autocompletion
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

# Use caching so that commands like apt and dpkg complete are useable
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path $ZSH_CACHE_DIR

# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
        adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
        clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
        gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
        ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
        named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
        operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
        rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
        usbmux uucp vcsa wwwrun xfs '_*'

# ... unless we really want to.
zstyle '*' single-ignored show

# zsh's backword menu complete is different from readline's for some reason
bindkey '^[[Z' reverse-menu-complete

# TODO: move these completions to a completions file
# TODO: remove this sed command once the helm completion command is fixed
type helm > /dev/null && source <(helm completion zsh | sed -E 's/\["(.+)"\]/\[\1\]/g')
type kubectl > /dev/null && source <(kubectl completion zsh)
type airshipctl > /dev/null && source <(airshipctl completion zsh)
#===]
#===[ History
# TODO: clean this up too
# History file configuration
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=50000
SAVEHIST=10000

## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
#===]
#===[ Pagers
# colors for man
export LESS_TERMCAP_mb=$'\e[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\e[1;33m'     # begin blink
export LESS_TERMCAP_so=$'\e[01;44;37m' # begin reverse video
export LESS_TERMCAP_us=$'\e[01;37m'    # begin underline
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline
export MANPAGER='less -s -M +Gg'       # percentage into the document

# TODO: what are these?
# export PAGER='less'
# export LESS='-R'
#===]
#===[ fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPS="--extended"
export FZF_DEFAULT_COMMAND="fd --type f --type l --exclude='*vendor/*'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="find -L . -mindepth 1 \\( -path '*/vendor*' -o -path '*/gocode/pkg*' -o -path '*/go/pkg*' -o -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune -o -type d -print 2> /dev/null"
#===]
#===[ Path extensions
# prepend and append will add $1 to the PATH variable, given that $1 is not already in the PATH
# My personal bin
[[ -d "$HOME/bin" ]] && prepend "$HOME/bin"
# Java, if I have it
[[ -d "/usr/local/bin/jre1.8.0_211/bin" ]] && append "/usr/local/bin/jre1.8.0_211/bin"
#===]
#===[ Spectrum
# This is just for fun
typeset -AHg FX FG BG

FX=(
    reset     "%{[00m%}"
    bold      "%{[01m%}" no-bold      "%{[22m%}"
    italic    "%{[03m%}" no-italic    "%{[23m%}"
    underline "%{[04m%}" no-underline "%{[24m%}"
    blink     "%{[05m%}" no-blink     "%{[25m%}"
    reverse   "%{[07m%}" no-reverse   "%{[27m%}"
)

for color in {000..255}; do
    FG[$color]="%{[38;5;${color}m%}"
    BG[$color]="%{[48;5;${color}m%}"
done

ZSH_SPECTRUM_TEXT=${ZSH_SPECTRUM_TEXT:-Arma virumque cano Troiae qui primus ab oris}

# Show all 256 colors with color number
function spectrum_ls() {
  for code in {000..255}; do
    print -P -- "$code: %{$FG[$code]%}$ZSH_SPECTRUM_TEXT%{$reset_color%}"
  done
}

# Show all 256 colors where the background is set to specific color
function spectrum_bls() {
  for code in {000..255}; do
    print -P -- "$code: %{$BG[$code]%}$ZSH_SPECTRUM_TEXT%{$reset_color%}"
  done
}
#===]
#===[ Unsorted
# Allow proper substitution in the prompt
setopt PROMPT_SUBST

# Setup default editor
export EDITOR='vim'
export VISUAL='vim'

# Don't share a history between shells. That's weird.
unsetopt share_history
setopt no_share_history

# recognize that comments are comments
setopt interactivecomments

# This... almost works. ctrl-z does backgrounding AND foregrounding. It could
# use seom work though
fancy-ctrl-z() {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
  else
    bg
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z
#===]
# vim:foldmethod=marker:foldlevel=0:foldmarker====[,===]:ts=2:sw=2
