#!/usr/bin/zsh
#===[ Things that need to be sourced
# IMPORTANT: This section needs to remain at the top. Some of the other things
# in this file will depend on it.

# Source my aliases
source "$HOME/.sh_aliases"

# My custom functions
source "$HOME/.funcs"

#===[ Colors
# Turn on convenient colors
autoload -U colors && colors

# ls colors
if [[ -z "$LS_COLORS" ]]; then
  (( $+commands[dircolors] )) && eval "$(dircolors -b)"
fi
ls --color -d . &>/dev/null && alias ls='ls --color=tty' || { ls -G . &>/dev/null && alias ls='ls -G' }

#===[ Functions
# Outputs current branch info in prompt format
function git_prompt_info() {
  local ref
  ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
  ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
  local prefix suffix
  # prefix="%{$fg_bold[blue]%}git:(%{$fg[red]%}"
  prefix="%{$fg_bold[blue]%}"
  suffix="%{$reset_color%} "
  echo "$prefix${ref#refs/heads/}$(parse_git_dirty)$suffix"
}

# Checks if working tree is dirty
function parse_git_dirty() {
  local STATUS=''
  local -a FLAGS
  local dirty clean
  dirty=" %{$fg[red]%}✗"
  clean=" %{$fg_bold[green]%}✓"
  staging=" %{$fg[yellow]%}★"
  FLAGS=('--porcelain')
  FLAGS+='--ignore-submodules=dirty'
  STATUS=$(command git status ${FLAGS} 2> /dev/null)

  UNTRACKED=$(command git status ${FLAGS} 2> /dev/null | grep "^??")
  INDEX_CHANGED=$(command git status ${FLAGS} 2> /dev/null | grep "^[^ ?].")
  WORKINGTREE_CHANGED=$(command git status ${FLAGS} 2> /dev/null | grep "^.[^ ?]")
  let "val = 0"
  if [[ -n $UNTRACKED ]]; then
    let "val = $val | 4"
  fi
  if [[ -n $INDEX_CHANGED ]]; then
    let "val = $val | 2"
  fi
  if [[ -n $WORKINGTREE_CHANGED ]]; then
    let "val = $val | 1"
  fi
  if [[ $val -eq 0 ]]; then
    echo " %{$fg_bold[green]%}$val"
  elif [[ "(( $val % 2 ))" -eq 0 ]]; then
    echo " %{$fg_bold[yellow]%}$val"
  else
    echo " %{$fg_bold[red]%}$val"
  fi
}

# If we're in an SSH session, show the hostname in the prompt
function ssh_prompt_info() {
  if [[ -n $SSH_CLIENT ]]; then
      echo " %{$fg_bold[red]%}SSH(%m)%{$reset_color%}"
  fi
}

#===[ Prompt
function set_prompt() {
  # KEYMAP contains the currently selected keymap e.g. "main", "viins", "vicmd", etc
  # "main" is just an alias for "viins"
  case ${KEYMAP} in
    main|viins) mode_indication_color="%{$fg_bold[cyan]%}" ;;
    *)   mode_indication_color="%{$fg_bold[magenta]%}" ;;
  esac
  directory=" %{$mode_indication_color%}%c%{$reset_color%}"
  ret_status="%(?:%{$fg_bold[green]%}✓:%{$fg_bold[red]%}✗)%{$reset_color%}"
  LINE1="$ret_status$(ssh_prompt_info)$directory $(git_prompt_info)"

  NEWLINE=$'\n'
  PROMPT="${LINE1}${NEWLINE}$ "

  zle reset-prompt
}

function zle-line-init zle-keymap-select {
  # zle-line-init and zle-keymap-select are user-defined functions which recieve special treatment when defined as widgets:
  # * zle-line-init is called when the shell first starts (oversimplified, but whatever)
  # * zle-keymap-select is called when the value of ${KEYMAP} changes
  set_prompt
}
# zle -N defines a function as a "widget"
zle -N zle-keymap-select
zle -N zle-line-init

#===[ Vim
# Ensure that the prompt is redrawn when the terminal size changes.
TRAPWINCH() {
  zle && { zle -R; zle reset-prompt }
}

# turn on vi-mode
bindkey -v

# allow v to edit the command line (standard behaviour)
zle -N edit-command-line
autoload -Uz edit-command-line
bindkey -M vicmd 'q' edit-command-line

# allow ctrl-p, ctrl-n for navigate history (standard behaviour)
bindkey '^P' up-history
bindkey '^N' down-history
bindkey -M vicmd '^P' up-history
bindkey -M vicmd '^N' down-history

# allow ctrl-h, ctrl-w, ctrl-? for char and word deletion (standard behaviour)
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey -M vicmd '^?' backward-delete-char
bindkey -M vicmd '^h' backward-delete-char
bindkey -M vicmd '^w' backward-kill-word

# allow ctrl-r to perform backward search in history - this is overwritten later if fzf exists
bindkey '^r' history-incremental-search-backward
bindkey -M vicmd '^r' history-incremental-search-backward

# allow ctrl-a and ctrl-e to move to beginning/end of line
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line
bindkey -M vicmd '^a' beginning-of-line
bindkey -M vicmd '^e' end-of-line
# The following "fixes" the behavior of the home, end, and delete keys
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^[[3~" delete-char
bindkey -M vicmd "^[[H" beginning-of-line
bindkey -M vicmd "^[[F" end-of-line
bindkey -M vicmd "^[[3~" delete-char

# same as above, but using the keycodes for tmux
bindkey "^[[1~" beginning-of-line
bindkey "^[[4~" end-of-line
bindkey -M vicmd "^[[1~" beginning-of-line
bindkey -M vicmd "^[[4~" end-of-line

#===[ Completion
# Add custom completions to the function path
fpath=($HOME/.zsh/completions $fpath)
# Turn on completion
autoload -U compinit
compinit

# Use fzf for tab completion
# NOTE: This MUST be sourced before autosuggestions (which is near the bottom of this file at time of writing)
if [[ -s "$HOME/.dotfiles/links/zsh/fzf/fzf-tab.plugin.zsh" ]]; then
    source "$HOME/.dotfiles/links/zsh/fzf/fzf-tab.plugin.zsh"

    zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
    zstyle ':fzf-tab:*' popup-pad 80 0

    # set list-colors to enable filename colorizing
    zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

    # preview directory's content with ls when completing cd
    zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls -1 --color=always ${(Q)realpath}'

    # magic previews for files and directories
    zstyle ':fzf-tab:complete:*:*' fzf-preview 'bat --color=always ${(Q)realpath}'

    # show environment variable contents
    zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'
fi

# Case insensitive
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

#===[ History
# TODO: clean this up too
# History file configuration
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=50000
SAVEHIST=10000

## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution

#===[ Pagers
# colors for man
export LESS_TERMCAP_mb=$'\e[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\e[1;33m'     # begin blink
export LESS_TERMCAP_so=$'\e[01;44;37m' # begin reverse video
export LESS_TERMCAP_us=$'\e[01;37m'    # begin underline
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline

export MANPAGER='less -s -M +Gg'       # percentage into the document

#===[ fzf
source ~/.fzf.zsh
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --filepath-word" # Note to self: --border doesn't play nicely with fzf-atb
export FZF_DEFAULT_COMMAND="fd --hidden --no-ignore --exclude='*vendor/*'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# Preview file content using bat (https://github.com/sharkdp/bat)
export FZF_CTRL_T_OPTS="
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"
export FZF_ALT_C_COMMAND="find -L . -mindepth 1 \\( -path '*/vendor*' -o -path '*/gocode/pkg*' -o -path '*/go/pkg*' -o -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune -o -type d -print 2> /dev/null"
# Print tree structure in the preview window
export FZF_ALT_C_OPTS="--preview 'tree -C {}'"

#===[ Path extensions
prepend "$HOME/.dotfiles/links/bin"
prepend "$HOME/.local/bin"

# Add go to the environment
export GOROOT="/usr/local/go"
export PATH=$GOROOT/bin:$PATH
export PATH=$HOME/go/bin:$PATH

#===[ Unsorted
# Allow proper substitution in the prompt
setopt PROMPT_SUBST

# Setup default editor
export EDITOR='nvim'
export VISUAL='nvim'

# Don't share a history between shells. That's weird.
unsetopt share_history
setopt no_share_history

# recognize that comments are comments
setopt interactivecomments

# When hitting ctrl-w in insert mode, include the slash character (/) as a word separator
my-backward-delete-word() {
    local WORDCHARS=${WORDCHARS/\//}
    zle backward-delete-word
}
zle -N my-backward-delete-word
bindkey '^W' my-backward-delete-word

# Set up zoxide
eval "$(zoxide init --cmd cd zsh)"

#===[ Plugins
source "$HOME/.dotfiles/links/zsh/fzf-git.sh/fzf-git.sh"
# Fish-like autosuggestions
source "$HOME/.dotfiles/links/zsh/zsh-autosuggestions.zsh"
source "$HOME/.dotfiles/links/zsh/almostontop.plugin.zsh"
