#===[ Things that need to be sourced
# IMPORTANT: This section needs to remain at the top. Some of the other things
# in this file will depend on it.

# Source my aliases
[[ -f "$HOME/.sh_aliases" ]] && source "$HOME/.sh_aliases"

# My custom functions
[[ -f "$HOME/.funcs" ]] && source "$HOME/.funcs"

# This stuff is (supposedly :eye_roll:) command across different shells
[[ -f "$HOME/.dotfiles/localrc" ]] && source "$HOME/.dotfiles/localrc"

#===[ Colors
# Turn on convenient colors
autoload -U colors && colors

# ls colors
if [[ -z "$LS_COLORS" ]]; then
  (( $+commands[dircolors] )) && eval "$(dircolors -b)"
fi
ls --color -d . &>/dev/null && alias ls='ls --color=tty' || { ls -G . &>/dev/null && alias ls='ls -G' }

#===[ Functions
# Outputs current branch info in prompt format
function git_prompt_info() {
  local ref
  ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
  ref=$(command git rev-parse --short HEAD 2> /dev/null) || return 0
  local prefix suffix
  # prefix="%{$fg_bold[blue]%}git:(%{$fg[red]%}"
  prefix="%{$fg_bold[blue]%}"
  suffix="%{$reset_color%} "
  echo "$prefix${ref#refs/heads/}$(parse_git_dirty)$suffix"
}

# Checks if working tree is dirty
function parse_git_dirty() {
  local STATUS=''
  local -a FLAGS
  local dirty clean
  dirty=" %{$fg[red]%}âœ—"
  clean=" %{$fg_bold[green]%}âœ“"
  staging=" %{$fg[yellow]%}â˜…"
  FLAGS=('--porcelain')
  FLAGS+='--ignore-submodules=dirty'
  STATUS=$(command git status ${FLAGS} 2> /dev/null)

  UNTRACKED=$(command git status ${FLAGS} 2> /dev/null | grep "^??")
  INDEX_CHANGED=$(command git status ${FLAGS} 2> /dev/null | grep "^[^ ?].")
  WORKINGTREE_CHANGED=$(command git status ${FLAGS} 2> /dev/null | grep "^.[^ ?]")
  let "val = 0"
  if [[ -n $UNTRACKED ]]; then
    let "val = $val | 4"
  fi
  if [[ -n $INDEX_CHANGED ]]; then
    let "val = $val | 2"
  fi
  if [[ -n $WORKINGTREE_CHANGED ]]; then
    let "val = $val | 1"
  fi
  if [[ $val -eq 0 ]]; then
    echo " %{$fg_bold[green]%}$val"
  elif [[ "(( $val % 2 ))" -eq 0 ]]; then
    echo " %{$fg_bold[yellow]%}$val"
  else
    echo " %{$fg_bold[red]%}$val"
  fi
}


#===[ Prompt
function set_prompt() {
  # KEYMAP contains the currently selected keymap e.g. "main", "viins", "vicmd", etc
  # "main" is just an alias for "viins"
  case ${KEYMAP} in
    main|viins) mode_indication_color="%{$fg_bold[cyan]%}" ;;
    *)   mode_indication_color="%{$fg_bold[magenta]%}" ;;
  esac
  directory="%{$mode_indication_color%}%c%{$reset_color%}"
  ret_status="%(?:%{$fg_bold[green]%}âœ“:%{$fg_bold[red]%}âœ—)%{$reset_color%}"
  PROMPT="$ret_status $directory $(git_prompt_info)"
  zle reset-prompt
}

function zle-line-init zle-keymap-select {
  # zle-line-init and zle-keymap-select are user-defined functions which recieve special treatment when defined as widgets:
  # * zle-line-init is called when the shell first starts (oversimplified, but whatever)
  # * zle-keymap-select is called when the value of ${KEYMAP} changes
  set_prompt
}
# zle -N defines a function as a "widget"
zle -N zle-keymap-select
zle -N zle-line-init

#===[ Vim
# Ensure that the prompt is redrawn when the terminal size changes.
TRAPWINCH() {
  zle && { zle -R; zle reset-prompt }
}

# turn on vi-mode
bindkey -v

# allow v to edit the command line (standard behaviour)
zle -N edit-command-line
autoload -Uz edit-command-line
bindkey -M vicmd 'q' edit-command-line

# allow ctrl-p, ctrl-n for navigate history (standard behaviour)
bindkey '^P' up-history
bindkey '^N' down-history
bindkey -M vicmd '^P' up-history
bindkey -M vicmd '^N' down-history

# allow ctrl-h, ctrl-w, ctrl-? for char and word deletion (standard behaviour)
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey -M vicmd '^?' backward-delete-char
bindkey -M vicmd '^h' backward-delete-char
bindkey -M vicmd '^w' backward-kill-word

# allow ctrl-r to perform backward search in history - this is overwritten later if fzf exists
bindkey '^r' history-incremental-search-backward
bindkey -M vicmd '^r' history-incremental-search-backward

# allow ctrl-a and ctrl-e to move to beginning/end of line
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line
bindkey -M vicmd '^a' beginning-of-line
bindkey -M vicmd '^e' end-of-line
# The following "fixes" the behavior of the home, end, and delete keys
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^[[3~" delete-char
bindkey -M vicmd "^[[H" beginning-of-line
bindkey -M vicmd "^[[F" end-of-line
bindkey -M vicmd "^[[3~" delete-char

# same as above, but using the keycodes for tmux
bindkey "^[[1~" beginning-of-line
bindkey "^[[4~" end-of-line
bindkey -M vicmd "^[[1~" beginning-of-line
bindkey -M vicmd "^[[4~" end-of-line

# If I hit colon while in command mode, I almost definitely want to go to insert mdoe first
bindkey -M vicmd -s ':' 'cc:'

# make mode transitions faster (KEYTIMEOUT is in hundredths of a second)
export KEYTIMEOUT=1

#===[ Completion
# Turn on completion
autoload -U compinit
compinit

# Set up some default completers. These are executed in order when the TAB key
# is hit. If a completer fails, it attempts to use the next completer
# * _extensions matches globs
# * _complete matches exactly
# * _approximate will match strings that are are close (different chacters, missing or extra characters, swapped characters)
zstyle ':completion:*' completer _extensions _complete _approximate

# Cache completions to speed up future completions
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$HOME/.zsh/zcompcache"

# Use a menu for selection
zstyle ':completion:*' menu select

# zsh's menu completion uses c-n and TAB for forward, and c-p for backward. The following adds SHIFT-TAB for backward
bindkey '^[[Z' reverse-menu-complete

# The following "format" lines set up "headers" for each completion "sub-section"
# * Add a description to the thing that was completed (e.g. file vs command vs arg etc)
#   The group-order is needed to group together matches under their respective
#   headers (when there's more than one matched group). Note that the order is
#   specific; we should match aliases prior to matching non-aliases
zstyle ':completion:*:*:*:*:descriptions' format '%F{green}-- %d --%f'
zstyle ':completion:*:*:-command-:*:*' group-order alias builtins functions commands
# * Show the completions that were caught by the _approximate completor
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
# * Show an error if there are no matches
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'

# This makes files' and directories' colors match the output of ls
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# This is for makefile targets. For whatever reason it doesn't work by default
zstyle ':completion:*:*:make:*' tag-order 'targets'

# Add custom completions to the function path
fpath=($HOME/.zsh/completions $fpath)
# but it doesn't appear to work though, so resort to resin...
[ $(command -v kubectl) ] && source <(kubectl completion zsh)
[ $(command -v helm) ] && source <(helm completion zsh)

#===[ History
# TODO: clean this up too
# History file configuration
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=50000
SAVEHIST=10000

## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution

#===[ Pagers
# colors for man
export LESS_TERMCAP_mb=$'\e[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\e[1;33m'     # begin blink
export LESS_TERMCAP_so=$'\e[01;44;37m' # begin reverse video
export LESS_TERMCAP_us=$'\e[01;37m'    # begin underline
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline

export MANPAGER='less -s -M +Gg'       # percentage into the document

#===[ fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPS="--extended"
export FZF_DEFAULT_COMMAND="fd --type f --type l --exclude='*vendor/*'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="find -L . -mindepth 1 \\( -path '*/vendor*' -o -path '*/gocode/pkg*' -o -path '*/go/pkg*' -o -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune -o -type d -print 2> /dev/null"

#===[ Path extensions
# prepend and append will add $1 to the PATH variable, given that $1 is not already in the PATH
# My personal bins
[[ -d "$HOME/.dotfiles/links/bin" ]] && prepend "$HOME/.dotfiles/links/bin"
[[ -d "$HOME/bin" ]] && prepend "$HOME/bin"
# Java, if I have it
[[ -d "/usr/local/bin/jre1.8.0_211/bin" ]] && append "/usr/local/bin/jre1.8.0_211/bin"

# Add go to the environment
export GOROOT="/usr/local/go"
export PATH=$GOROOT/bin:$PATH
export PATH=$HOME/go/bin:$PATH

#===[ Spectrum
# This is just for fun
typeset -AHg FX FG BG

FX=(
    reset     "%{[00m%}"
    bold      "%{[01m%}" no-bold      "%{[22m%}"
    italic    "%{[03m%}" no-italic    "%{[23m%}"
    underline "%{[04m%}" no-underline "%{[24m%}"
    blink     "%{[05m%}" no-blink     "%{[25m%}"
    reverse   "%{[07m%}" no-reverse   "%{[27m%}"
)

for color in {000..255}; do
    FG[$color]="%{[38;5;${color}m%}"
    BG[$color]="%{[48;5;${color}m%}"
done

ZSH_SPECTRUM_TEXT=${ZSH_SPECTRUM_TEXT:-Arma virumque cano Troiae qui primus ab oris}

# Show all 256 colors with color number
function spectrum_ls() {
  for code in {000..255}; do
    print -P -- "$code: %{$FG[$code]%}$ZSH_SPECTRUM_TEXT%{$reset_color%}"
  done
}

# Show all 256 colors where the background is set to specific color
function spectrum_bls() {
  for code in {000..255}; do
    print -P -- "$code: %{$BG[$code]%}$ZSH_SPECTRUM_TEXT%{$reset_color%}"
  done
}

#===[ Unsorted
# Allow proper substitution in the prompt
setopt PROMPT_SUBST

# Setup default editor
export EDITOR='vim'
export VISUAL='vim'

# Don't share a history between shells. That's weird.
unsetopt share_history
setopt no_share_history

# recognize that comments are comments
setopt interactivecomments

# This... almost works. ctrl-z does backgrounding AND foregrounding. It could
# use seom work though
fancy-ctrl-z() {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
  else
    bg
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# When hitting ctrl-w in insert mode, include the slash character (/) as a word separator
my-backward-delete-word() {
    local WORDCHARS=${WORDCHARS/\//}
    zle backward-delete-word
}
zle -N my-backward-delete-word
bindkey '^W' my-backward-delete-word

#===[ Plugins
# Fish-like autosuggestions
[[ -s "$HOME/.dotfiles/links/zsh/zsh-autosuggestions.zsh" ]] && source "$HOME/.dotfiles/links/zsh/zsh-autosuggestions.zsh"
[[ -s "$HOME/.dotfiles/links/zsh/almostontop.plugin.zsh" ]] && source "$HOME/.dotfiles/links/zsh/almostontop.plugin.zsh"

